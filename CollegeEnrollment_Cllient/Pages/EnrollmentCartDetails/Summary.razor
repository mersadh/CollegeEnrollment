@page "/summary"
@using Microsoft.AspNetCore.Authorization
@inject ILocalStorageService _localStorage
@inject ISyncLocalStorageService _localStorageSync
@inject IMajorService _majorService
@inject IEnrollmentService _enrollmentService
@inject IJSRuntime _jsRuntime
@attribute [Authorize]
@inject NavigationManager NavManager
@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
	</div>
}
else 
{

 	 <div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">

        <div class="row p-2 my-3">
            <div class="col-12 col-lg-7 p-4">
                <div class="row px-2 text-success ">
                    <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Prijave na studij/e</p></div>
                    <div class="col-4 p-0" style="text-align:right">
                        <a href="/cart" class="btn btn-secondary btn-block">Nazad na listu prijava</a>
                    </div>
                </div>
                @foreach(var enroll in Enrollment.EnrollmentDetails){
                <div class="row border p-1 m-1">

                    <div class="col-3 col-md-2 ">
                        <img src="@enroll.Major.ImageUrl" width="100%">
                    </div>
                    <div class="col-5 col-md-5 ">
                        <span class="">Studij : @enroll.MajorName </span><br />
                        <span class="pt-1">Broj prijava : @enroll.Count</span><br />

                    </div>
                    <div class="col-4 col-md-5 " style="text-align:right;">
                        <h4 class="text-warning font-weight-bold pt-2">
                            <span style="border-bottom:1px solid #ff6a00">
                                Ukupno prijava: @enroll.Count
                            </span>
                        </h4>
                    </div>
                </div>
                }
                <div class="row" style="text-align:right">
                    <div class="col-12 px-3">
                        <h3> Broj odabranih studija : <span class="text-secondary">@Enrollment.EnrollmentHeader.NumberOfEnrollments.ToString()</span> </h3>
                    </div>
                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">
                <EditForm Model="Enrollment.EnrollmentHeader" OnSubmit="HandleEnrollment">
                    <DataAnnotationsValidator />
                    <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Lični podaci</p></div></div>

                    <div class="form-group pt-2">
                        <label class="text-warning">Ime</label>
                        <InputText @bind-Value="Enrollment.EnrollmentHeader.Ime" type="text" class="form-control" />
                        <ValidationMessage For="()=>Enrollment.EnrollmentHeader.Ime"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Prezime</label>
                        <InputText @bind-Value="Enrollment.EnrollmentHeader.Prezime" type="text" class="form-control" />
                        <ValidationMessage For="()=>Enrollment.EnrollmentHeader.Prezime"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Datum rodjenja</label>
                        <InputDate @bind-Value="Enrollment.EnrollmentHeader.DatumRodjenja" class="form-control" />
                        <ValidationMessage For="()=>Enrollment.EnrollmentHeader.DatumRodjenja"></ValidationMessage>           
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">JMBG</label>
                        <InputText @bind-Value="Enrollment.EnrollmentHeader.Jmbg" type="text" class="form-control" />
                        <ValidationMessage For="()=>Enrollment.EnrollmentHeader.Jmbg"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Naziv srednje škole</label>
                        <InputText @bind-Value="Enrollment.EnrollmentHeader.NazivSrednjeSkole" type="text" class="form-control" />
                        <ValidationMessage For="()=>Enrollment.EnrollmentHeader.NazivSrednjeSkole"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Broj diplome</label>
                        <InputText @bind-Value="Enrollment.EnrollmentHeader.BrojDiplome" type="text" class="form-control" />
                        <ValidationMessage For="()=>Enrollment.EnrollmentHeader.BrojDiplome"></ValidationMessage>
                    </div>



                    <div class="form-group pt-2">
                        <button type="submit" class="btn btn-success form-control">Prijava na studij</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    public bool IsProcessing { get; set; } = false;
    private EnrollmentDTO Enrollment { get; set; } = null;
    private IEnumerable<MajorDTO> Majors { get; set; }


    protected override async Task OnInitializedAsync()
    {
        IsProcessing=true;
        List<EnrollmentCart> cart = await _localStorage.GetItemAsync<List<EnrollmentCart>>(SD.EnrollmentCart);
        Majors = await _majorService.GetAll();
        Enrollment = new()
            {
                EnrollmentHeader = new()
                {
                    Status = SD.Status_Pending,
                    NumberOfEnrollments = 0
                },
                EnrollmentDetails = new List<EnrollmentDetailDTO>()

            }; 

        foreach(var item in cart)
        {
            MajorDTO major = Majors.FirstOrDefault(u => u.Id == item.MajorId);

            EnrollmentDetailDTO enrollmentDetailDTO = new()
                {
                    MajorId = item.MajorId,
                    Count = item.Count,
                    MajorName = major.Name,
                    Major = major
                };
            Enrollment.EnrollmentDetails.Add(enrollmentDetailDTO);
            Enrollment.EnrollmentHeader.NumberOfEnrollments +=item.Count;
        }

        if(await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails)!=null)
        {
            var userInfo = await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
            Enrollment.EnrollmentHeader.userId = userInfo.Id;
            Enrollment.EnrollmentHeader.Ime = userInfo.Name;
            Enrollment.EnrollmentHeader.Email = userInfo.Email;
            //   Enrollment.EnrollmentHeader.PhoneNumber = userInfo.PhoneNumber;
        }

        IsProcessing=false;

    }

    private async Task HandleEnrollment()
    {



        try
        {
            IsProcessing = true;
            var enrollmentFinalizeDTO = new EnrollmentFinalizeDTO()
                {
                    Enrollment = Enrollment,
                };
            var EnrollmentHeaderSaved = await _enrollmentService.Create(enrollmentFinalizeDTO);
            await _jsRuntime.ToastrSuccess("Vaša prijava je poslana!");
            NavManager.NavigateTo("/");
        }
        catch(Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }
    }

