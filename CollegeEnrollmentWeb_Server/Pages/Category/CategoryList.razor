@page "/category"
@using CollegeEnrollment_Common

@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jsRuntime
@attribute [Authorize(Roles = SD.Role_Admin)]

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

<div class="row mt-4">
    <div class="col6">
        <h4 class="card-title text-primary"> Načini studiranja</h4>
    </div>
    <div class="col-4 offset-2">
        <a  href="category/create" class="btn btn-primary form-control">Dodaj novi način studiranja</a>
    </div>
    <div class="col-12">
        @if(Categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                <tr>
                    <th>Način studiranja</th>
                    <th>Akcija</th>
                </tr>
                </thead>
                <tbody>
                    @foreach(var objCat in Categories)
                    {
                        <tr>
                            <td>
                                @objCat.Name
                            </td>
                            <td>
                            <NavLink href="@($"category/edit/{objCat.Id}")" class="btn btn-primary">Ažuriraj</NavLink>
                            <button class="btn btn-danger" @onclick="()=>HandleDelete(objCat.Id)">Obriši</button>
                        </td>
                        </tr>
                    }
                </tbody>

            </table>
        }
        else
        {
            if(IsLoading)
            {
                //loading gif
                <div class="text-center">
                 <img src="/images/loading.gif">
                 </div>
            }
            else
            {
                // nema rekorda
                <p>No records found.</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    public bool IsLoading { get; set; }
    private int DeleteCategoryId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadCategories();
        }


    }
    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if(isConfirmed && DeleteCategoryId!=0)
        {
          //  await Task.Delay(5000);
             await _categoryRepository.Delete(DeleteCategoryId);
            await LoadCategories();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }

}
