@page "/major/create"
@page "/major/edit/{id:int}"
@using CollegeEnrollment_Common

@inject ICategoryRepository _categoryRepository
@inject IMajorRepository _majorRepository
@inject NavigationManager _navigationManager
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime
@attribute [Authorize(Roles = SD.Role_Admin)]

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3"> @Title novi smjer studiranja</h3>
    <div class="col-md-10">
        @if (IsLoading)
        {
            //loading gif
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="Major" OnValidSubmit="UpsertMajor">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>Studijski smjer</label>
                    <InputText @bind-Value="Major.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Major.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Opis</label>
                    <InputTextArea @bind-Value="Major.Description" class="form-control"></InputTextArea>
                    <ValidationMessage For="()=>Major.Description"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Dužina trajanja</label>
                    <InputText @bind-Value="Major.Duration" class="form-control"></InputText>
                    <ValidationMessage For="()=>Major.Duration"></ValidationMessage>
                </div>
                <div class="row pt-3">
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Major.StudentFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Da li je najpopularniji medju studenntima?</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Major.SchoolFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Da li je fakultetski favorit?</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <label>Vrsta studija</label>
                            <InputSelect @bind-Value="Major.CategoryId" class="form-select">
                                <option value="0" disabled="disabled" selected>--Odaberi vrstu--</option>
                            @foreach(var cat in Categories)
                            {
                            <option value="@cat.Id">@cat.Name</option>
                            }

                            </InputSelect>
                             <ValidationMessage For="()=>Major.CategoryId"></ValidationMessage>
                           
                        </div>

                    <div class="form-group pt-4 col-6">
                        <InputFile OnChange="HandleImageUpload"></InputFile>
                    </div>

                </div>

                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="major" class="btn btn-secondary">Povratak na Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
    <div class="col-md-2">
        <img src="@Major.ImageUrl" class="w-100" />
    </div>

</div>

@code {
    [Parameter]
    public int Id { get; set; }



    private MajorDTO Major { get; set; } = new()
        {
            ImageUrl = "/images/default.png"
    };
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Dodaj";
    public bool IsLoading { get; set; }
    public string OldImageUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadMajor();
        }

    }
    private async Task LoadMajor()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        if (Id != 0)
        {
            //update
            Title = "ažuriraj";
            Major = await _majorRepository.Get(Id);
            OldImageUrl = Major.ImageUrl;

        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertMajor()
    {
        if (Major.Id == 0)
        {
            //create
            await _majorRepository.Create(Major);
            await _jsRuntime.ToastrSuccess("Studij dodan uspješno.");
        }
        else
        {
            //update
            if (OldImageUrl != Major.ImageUrl)
            {
                _fileUpload.DeleteFile(OldImageUrl);
            }
            await _majorRepository.Update(Major);
            await _jsRuntime.ToastrSuccess("Studij ažuriran uspješno.");

        }
        _navigationManager.NavigateTo("major");
    }
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if(e.GetMultipleFiles().Count>0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if(fileInfo.Extension.ToLower()== ".jpg" || 
                    fileInfo.Extension.ToLower()== ".png" || 
                    fileInfo.Extension.ToLower()== ".jpeg")
                    {
                        Major.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Molim odaberite .jpg/ .jpeg/ .png file");
                    }
                }
            }
            IsLoading = false;
        }
        catch(Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }

}
